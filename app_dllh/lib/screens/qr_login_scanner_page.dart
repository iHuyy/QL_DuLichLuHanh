// File: qr_login_scanner_page.dart (CH·ªà D√ôNG mobile_scanner & image_picker)

import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart'; 
import 'package:image_picker/image_picker.dart'; // üîë C·∫ßn thi·∫øt ƒë·ªÉ ch·ªçn ·∫£nh
// B·∫°n c√≥ th·ªÉ c·∫ßn import 'dart:io'; n·∫øu mu·ªën l√†m vi·ªác v·ªõi File, nh∆∞ng image.path l√† ƒë·ªß.

const Color primaryBlue = Color(0xFF007AFF);

class QRLoginScannerPage extends StatefulWidget { 
  const QRLoginScannerPage({super.key});

  @override
  State<QRLoginScannerPage> createState() => _QRLoginScannerPageState(); 
}

class _QRLoginScannerPageState extends State<QRLoginScannerPage> { 
  MobileScannerController cameraController = MobileScannerController();
  final ImagePicker _picker = ImagePicker(); 

  // =========================================================
  // LOGIC QU√âT TR·ª∞C TI·∫æP
  // =========================================================
  void _onDetect(BarcodeCapture capture) {
    final List<Barcode> barcodes = capture.barcodes;
    
    if (barcodes.isNotEmpty) {
      final String? rawValue = barcodes.first.rawValue;
      if (rawValue != null) {
        cameraController.stop(); 
        Navigator.pop(context, rawValue);
      }
    }
  }

  // =========================================================
  // üîë LOGIC ƒê·ªåC QR T·ª™ TH∆Ø VI·ªÜN ·∫¢NH (D√πng mobile_scanner.analyzeImage)
  // =========================================================
  Future<void> _scanImageFromGallery() async {
  try {
    cameraController.stop(); 
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);

    if (image == null) {
      cameraController.start();
      return;
    }
    
    // üîë D√íNG S·ª¨A L·ªñI: √âp ki·ªÉu k·∫øt qu·∫£ tr·∫£ v·ªÅ th√†nh Barcode? m·ªôt c√°ch an to√†n
    final Barcode? result = await cameraController.analyzeImage(image.path) as Barcode?;

    // Ki·ªÉm tra an to√†n Barcode? v√† thu·ªôc t√≠nh rawValue
    if (result != null && result.rawValue != null) {
      final String qrData = result.rawValue!;
      
      if (mounted) {
          Navigator.pop(context, qrData);
      }

    } else {
      // Bao g·ªìm tr∆∞·ªùng h·ª£p k·∫øt qu·∫£ l√† null ho·∫∑c kh√¥ng ph·∫£i Barcode
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Kh√¥ng t√¨m th·∫•y m√£ QR h·ª£p l·ªá trong h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
    
    cameraController.start();

  } catch (e) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói qu√©t ·∫£nh: ${e.toString()}'),
          backgroundColor: Colors.red,
        ),
      );
    }
    cameraController.start();
    }
  }

  @override
  void dispose() {
    cameraController.dispose();
    super.dispose();
  }

  // =========================================================
  // WIDGETS GIAO DI·ªÜN
  // =========================================================
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Qu√©t M√£ QR ƒêƒÉng nh·∫≠p',
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: primaryBlue,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Stack(
        children: [
          // 1. Mobile Scanner (Camera)
          MobileScanner(
            controller: cameraController,
            onDetect: _onDetect,
            overlay: Padding(
              padding: const EdgeInsets.all(40.0),
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(
                    color: primaryBlue,
                    width: 4,
                  ),
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
          
          // Th√¥ng b√°o h∆∞·ªõng d·∫´n
          const Align(
            alignment: Alignment.topCenter,
            child: Padding(
              padding: EdgeInsets.only(top: 50),
              child: Text(
                'ƒê·∫∑t m√£ QR trong khung ƒë·ªÉ ƒëƒÉng nh·∫≠p',
                style: TextStyle(
                  color: Colors.white,
                  backgroundColor: Colors.black54,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
          
          // 2. N√∫t ƒê·ªçc QR t·ª´ Th∆∞ vi·ªán ·∫¢nh (V·ªã tr√≠ ·ªü d∆∞·ªõi)
          Align(
            alignment: Alignment.bottomCenter,
            child: Padding(
              padding: const EdgeInsets.only(bottom: 40, left: 20, right: 20),
              child: ElevatedButton.icon(
                onPressed: _scanImageFromGallery,
                icon: const Icon(Icons.image, color: Colors.white),
                label: const Text(
                  'Qu√©t QR t·ª´ Th∆∞ vi·ªán ·∫¢nh',
                  style: TextStyle(fontSize: 18, color: Colors.white),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: primaryBlue,
                  padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}