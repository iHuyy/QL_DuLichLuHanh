import 'dart:convert';
import 'package:http/http.dart' as http;

class AuthService {
  // üîß ƒê·ªãa ch·ªâ API PHP tr√™n m√°y ·∫£o / server Oracle Linux
  final String baseUrl = "http://10.0.2.2/KLTN";

  /// ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Oracle c√≥ quy·ªÅn SYSDBA
  Future<Map<String, dynamic>> login(String username, String password) async { 
    final response = await http.post(
      Uri.parse("$baseUrl/login.php"),
      headers: {"Content-Type": "application/json"},
      body: jsonEncode({
        "username": username,
        "password": password,
        // Role kh√¥ng c√≤n ƒë∆∞·ª£c g·ª≠i t·ª´ client, server s·∫Ω t·ª± quy·∫øt ƒë·ªãnh
      }),
    );

    // Log th√¥ ƒë·ªÉ debug (console c·ªßa Flutter)
    print("login.php status: ${response.statusCode}");
    print("login.php body: ${response.body}");

    // N·∫øu server tr·∫£ kh√¥ng ph·∫£i JSON, b·∫Øt v√† tr·∫£ l·ªói r√µ r√†ng
    try {
      final decoded = jsonDecode(response.body);
      return decoded as Map<String, dynamic>;
    } catch (e) {
      // Tr·∫£ th√¥ng tin body gi√∫p bi·∫øt nguy√™n nh√¢n (HTML error page / PHP warning...)
      return {
        "success": false,
        "message": "Invalid JSON from server (HTTP ${response.statusCode}): ${response.body}"
      };
    }
  }

  // New: L·∫•y th√¥ng tin user theo userID
  Future<Map<String, dynamic>> getUser(String userID, {String? dbUser, String? dbPass, String role = 'DEFAULT'}) async {
    final body = {
      "userID": userID,
      if (dbUser != null) "dbUser": dbUser,
      if (dbPass != null) "dbPass": dbPass,
      "role": role,
    };

    final response = await http.post(
      Uri.parse("$baseUrl/get_user.php"),
      headers: {"Content-Type": "application/json"},
      body: jsonEncode(body),
    );

    print("get_user.php status: ${response.statusCode}");
    print("get_user.php body: ${response.body}");

    try {
      final decoded = jsonDecode(response.body);
      return decoded as Map<String, dynamic>;
    } catch (e) {
      return {
        "success": false,
        "message": "Invalid JSON from server (HTTP ${response.statusCode}): ${response.body}"
      };
    }
  }

  /// C·∫≠p nh·∫≠t: T·∫°o user Oracle m·ªõi (t·ª± ƒë·ªông g√°n ROLE_CUSTOMER & PROFILE_CUS)
  Future<Map<String, dynamic>> register({
    required String username,
    required String password,
    required String hoTen,
    required String email,
    String? soDienThoai,
    String? diaChi,
  }) async {
    final url = Uri.parse('$baseUrl/register.php');

    final payload = {
      "username": username,
      "password": password,
      "hoTen": hoTen,
      "email": email,
      "soDienThoai": soDienThoai ?? '',
      "diaChi": diaChi ?? ''
    };

    try {
      final res = await http.post(url,
          headers: {'Content-Type': 'application/json; charset=utf-8'},
          body: jsonEncode(payload));

      if (res.statusCode == 200) {
        final Map<String, dynamic> body = jsonDecode(res.body);
        return body;
      } else {
        return {
          "success": false,
          "message": "L·ªói k·∫øt n·ªëi (${res.statusCode}). Chi ti·∫øt: ${res.body}"
        };
      }
    } catch (e) {
      return {"success": false, "message": "L·ªói m·∫°ng ho·∫∑c ngo·∫°i l·ªá: $e"};
    }
  }

  /// ƒêƒÉng xu·∫•t kh·ªèi session SYSDBA
  Future<Map<String, dynamic>> logout() async {
    final response = await http.get(Uri.parse("$baseUrl/logout.php"));
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      return {
        "success": false,
        "message": "HTTP ${response.statusCode}: ${response.reasonPhrase}"
      };
    }
  }
}